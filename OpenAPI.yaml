openapi: 3.0.0
paths:
  /v0/grades/backend:
    post:
      operationId: GradesController_checkBarcode
      parameters: []
      requestBody:
        required: true
        description: The barcode to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarcodeDto'
      responses:
        '201':
          description: Request returned a positive result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backendResponseDto'
        '400':
          description: Input Error / Bad Request.
        '500':
          description: Internal Server Error.
      tags:
        - Grades
        - Grades
  /v0/product/{barcode}:
    post:
      operationId: ProductController_getProductDetails
      parameters:
        - name: barcode
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Request returned a positive result.
        '400':
          description: Input Error / Bad Request.
        '404':
          description: Specified product is not in the database.
        '500':
          description: Internal Server Error.
      tags:
        - Product
        - Product
  /v0/ingredients/{ingredients}:
    get:
      operationId: IngredientsController_getIngredients
      parameters:
        - name: ingredients
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Request returned a positive result.
        '500':
          description: Internal Server Error.
        '503':
          description: >-
            Service Unavailable. Translation service is unavailable. Try again
            with disabled translation (Results might vary). Add flag
            ?translate=false to the request.
      tags:
        - Ingredients
        - Ingredients
  /v1/ingredients/{ingredients}:
    get:
      operationId: IngredientsV1Controller_getIngredients
      parameters:
        - name: ingredients
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Request returned a positive result.
        '500':
          description: Internal Server Error.
        '503':
          description: >-
            Service Unavailable. Translation service is unavailable. Try again
            with disabled translation (Results might vary). Add flag
            ?translate=false to the request.
      tags:
        - IngredientsV1
        - Ingredients
  /v0/peta/{type}:
    get:
      operationId: PetaController_getPetaByType
      parameters:
        - name: type
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Request returned a positive result.
        '400':
          description: Input Error / Bad Request.
        '404':
          description: Specified tyoe is not available.
        '500':
          description: Internal Server Error.
      tags:
        - Peta
        - Peta
  /health:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example: &ref_0
                      database: &ref_1
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example: *ref_0
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example: *ref_0
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example:
                      redis: &ref_2
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database: *ref_1
                      redis: *ref_2
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
      tags:
        - Health
info:
  title: Veganify API
  description: API for checking if products and ingredients are vegan
  version: 0.3.1
  contact:
    name: FrontendNetwork
    url: https://veganify.app
    email: info@philip.media
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags: []
servers:
  - url: https://api.veganify.app
    description: Production server
  - url: https://api.staging.veganify.app
    description: Staging server
components:
  schemas:
    BarcodeDto:
      type: object
      properties:
        barcode:
          type: string
          description: The barcode to be checked
          example: '4066600204404'
      required:
        - barcode
    backendResponseDto:
      type: object
      properties:
        barcode:
          type: string
          description: The barcode requested
          example: '12345678'
        name:
          type: string
          description: The name of the product
          example: Paulaner Spezi Zero
        grade:
          type: string
          description: The grade of the product
          example: B
      required:
        - barcode
        - name
        - grade
externalDocs:
  description: Veganify API Documentation
  url: https://frontendnet.work/veganify-api
